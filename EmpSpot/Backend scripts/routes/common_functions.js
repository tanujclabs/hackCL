/*
 * ------------------------------------------------------
 * Check if manadatory fields are not filled
 * INPUT : array of field names which need to be mandatory
 * OUTPUT : Error if mandatory fields not filled
 * ------------------------------------------------------
 */

exports.CheckBlank = function(arr)
{
    var arrlength = arr.length;
    for (var i = 0; i < arrlength; i++)
    {
        if (arr[i] === '')
        {
            return 1;
            break;
        }

    }
    return 0;
};

/*
 * ------------------------------------------------------
 *  Authenticate a user
 *  INPUT : user_access_token
 *  OUTPUT : user_id
 * ------------------------------------------------------
 */

exports.authenticateUser = function(user_access_token, callback)
{
    var sql = "SELECT `user_id` FROM `users` WHERE `user_access_token`=? LIMIT 1";
    connection.query(sql, [user_access_token], function(err, result) {

        if (result.length > 0) {
            return callback(result);
        } else {
            return callback(0);
        }
    });
};

/*
 * -----------------------------------------------------------------------------
 * To check wheather email already exists or not in database
 * INPUT : email
 * OUTPUT : 1(Exist)/0(Doesn't exist)
 * -----------------------------------------------------------------------------
 */

exports.CheckEmail = function(email, callback)
{
    var sql = "SELECT `user_id`,`status` FROM `users` WHERE `email_id`=? LIMIT 1";
    connection.query(sql, [email], function(err, result) {

        if (result.length !== 0) {
            return callback(result);
        }
        return callback(0);
    });
};

/*
 * -----------------------------------------------------------------------------
 * To generate random string for forgot password
 * INPUT : 
 * OUTPUT : Autogenerated Alphanumeric Password
 * -----------------------------------------------------------------------------
 */

exports.generateRandomString = function()
{
    var math = require('math');

    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

    for (var i = 0; i < 6; i++)
        text += possible.charAt(math.floor(math.random() * possible.length));

    return text;
};

/*
 * -----------------------------------------------------------------------------
 * To send an email to one/multiple users
 * INPUT : receiverMailIdStr(To), message, subject,
 * OUTPUT : 1(Succesful Invite)/0(Unsuccesful Invite)
 * -----------------------------------------------------------------------------
 */

exports.SendEmail = function(receiverMailIdStr, message, subject, callback) {
   var receiverMailIdArr = receiverMailIdStr.split(",");
   var nodemailer = require("nodemailer");    
   var smtpTransport,mailOptions;
   var receiverMailIdArrLength=receiverMailIdArr.length;
   for(var i=0;i<receiverMailIdArrLength;i++){
        // setup e-mail data with unicode symbols
        smtpTransport = nodemailer.createTransport("SMTP", {
            service: "Gmail",
            auth: {
                user: "test.empspot@gmail.com",
                pass: "testingempspot"
            }
        });
        mailOptions = {
            from: "Empspot Admin", // sender address
            to: receiverMailIdArr[i], // list of receivers
            subject: subject, // Subject line
//            text: message // plaintext body
            html: message // html body
        };

        // send mail with defined transport object
        smtpTransport.sendMail(mailOptions, function(error, response) {
            if (error) {
                return callback(0);
            } else {
                return callback(1);
            }
            // if you don't want to use this transport object anymore, uncomment following line
            smtpTransport.close(); // shut down the connection pool, no more messages
        });
   }
   
};

/*
 * -----------------------------------------------------------------------------
 * Getting user data from user_id
 * INPUT : user_id
 * OUTPUT : user's data
 * -----------------------------------------------------------------------------
 */

exports.GetUserDataFromUserId = function(userId, callback)
{
    var sql = "SELECT `user_id`,`user_access_token`,`user_name`,`email_id`,`name`,`password`,`designation`,`location`,`description`,`user_image`  FROM `users` WHERE `user_id`=? LIMIT 1";
    connection.query(sql, [userId], function(err, results) {
        if (results)
        {
            results[0].user_image='http://bibliohive.s3.amazonaws.com/UserProfile/'+results[0].user_image;
            return callback(results);
        }
        else{
            return callback(0);
        }       

    });
};

/*
 * -----------------------------------------------------------------------------
 * sorting an array in descending order
 * INPUT : array and key according to which sorting is to be done
 * OUTPUT : sorted array
 * -----------------------------------------------------------------------------
 */
exports.SortByKeyDesc = function(array, key) {
    return array.sort(function(a, b) {
        var x = a[key];
        var y = b[key];
        return ((x > y) ? -1 : ((x < y) ? 1 : 0));
    });
};

/*
 * -----------------------------------------------------------------------------
 * sorting an array in ascending order
 * INPUT : array and key according to which sorting is to be done
 * OUTPUT : sorted array
 * -----------------------------------------------------------------------------
 */
exports.SortByKeyAsc = function(array, key) {
    return array.sort(function(a, b) {
        var x = a[key];
        var y = b[key];
        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
    });
};

/*
 * -----------------------------------------------------------------------------
 * Uploading image to s3 bucket
 * INPUT : file parameter
 * OUTPUT : image path
 * -----------------------------------------------------------------------------
 */
exports.UploadImageToS3Bucket = function(file, folder, callback)
{
    var fs = require('node-fs');
    var AWS = require('aws-sdk');
    
        var filename = file.name; // actual filename of file
        var path = file.path; //will be put into a temp directory
        var mimeType = file.type;

        fs.readFile(path, function(error, file_buffer) {
            if (error)
            {
                return callback(0);
            }
            
            filename = file.name;

            AWS.config.update({accessKeyId: 'AKIAICBNMK4N2BGIIXKA', secretAccessKey: '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'});
            var s3bucket = new AWS.S3();
            var params = {Bucket: 'empspot', Key: folder + '/' + filename, Body: file_buffer, ACL: 'public-read', ContentType: mimeType};

            s3bucket.putObject(params, function(err, data) {
                if (err)
                {
                    return callback(0);
                }
                return callback(filename);
            });
        });
};